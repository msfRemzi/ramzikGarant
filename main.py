import logging

import aiogram
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.callback_query import CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import *
from key import *
from services import create_new_meetings, is_member_in_meeting, remove_second_member, write_down_message, is_user_in_db, \
	send_list_of_meetings, remove_meeting, join_to_meeting_admin, send_all_messages_of_meeting, \
	end_meeting, get_data_of_meeting_from_state, join_to_meeting_and_send_message, send_meetings_that_need_garant, \
	send_error_to_join_admin_as_member, get_statistics_bot, make_mailing_to_all, logout_from_meeting, \
	call_garanta_for_meeting
from texts_bot import ways_to_pay, rules_bot

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_BOT)
storage = MemoryStorage()
dp = Dispatcher(bot,storage=storage)

class Admin_sector(StatesGroup):
	box = State()

class Meeting_sector(StatesGroup):
	id_meeting = State()
	first_member = State()
	second_member = State()
	admin = State()
	url_meeting = State()

	box = State() # –¢—É—Ç –±—É–¥–µ—Ç –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä

class Mailing_sector(StatesGroup):
	text_mailing = State()

# –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message, state: FSMContext):
	is_user_in_db(message.chat.id)

	"""–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—à–µ–ª –ª–∏ —é–∑–µ—Ä –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —Å–¥–µ–ª–∫—É"""
	if len(message.text.split(' ')) == 2:

		# –ï—Å–ª–∏ —é–∑–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, —Ç–æ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è
		if not await send_error_to_join_admin_as_member(Admin_sector=Admin_sector, message_obj=message): return

		await join_to_meeting_and_send_message(state=state, message=message, Meeting_sector=Meeting_sector)


	else:
		await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', reply_markup=main_panel())

@dp.message_handler()
async def main(message: types.Message, state: FSMContext):
	is_user_in_db(message.chat.id)

	if message.chat.id in ADMINS and message.text != '/admin':
		await message.answer('–í—ã –∞–¥–º–∏–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ /admin')
		return

	# """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—à–µ–ª –ª–∏ —é–∑–µ—Ä –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —Å–¥–µ–ª–∫—É"""
	if '/start' in message:
		if len(message.text.split(' ')) == 2:

			# –ï—Å–ª–∏ —é–∑–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, —Ç–æ –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è
			if not await send_error_to_join_admin_as_member(Admin_sector=Admin_sector, message_obj=message): return

			await join_to_meeting_and_send_message(state=state, message=message, Meeting_sector=Meeting_sector)


	elif message.text == "–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É":
		data_meeting = create_new_meetings(message.chat.id)
		if not data_meeting:
			await message.answer("–í—ã —É–∂–µ –µ—Å—Ç—å –≤ <b>–¥—Ä—É–≥–æ–π</b> —Å–¥–µ–ª–∫–µ!", parse_mode='html')
			return

		await message.answer(f"ID —Å–¥–µ–ª–∫–∏ <b>{data_meeting.get('id_meeting')}</b>\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {data_meeting.get('url_meeting')}", reply_markup=control_panel(), parse_mode='html', disable_web_page_preview=True)

		await Meeting_sector.box.set()
		await state.update_data(id_meeting=data_meeting.get('id_meeting'), first_member=message.chat.id, second_member=None, admin=None, url_meeting=data_meeting.get('url_meeting'))

	elif message.text == '–†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã':
		await message.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤", reply_markup=go_to_URL_key(TELEGRAM_CHANNEL))

	elif message.text == '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã':
		await message.answer(ways_to_pay, reply_markup=go_to_URL_key(MENEDGER))

	elif message.text == '–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞':
		await message.answer(rules_bot, reply_markup=main_panel())

	elif message.text == "/admin" and message.chat.id in ADMINS:
		await message.answer("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_panel(), parse_mode='html')
		await Admin_sector.box.set()


#__________________________________________________________________________________#


@dp.message_handler(state=Meeting_sector.box)
async def meeting_box(message: types.Message, state: FSMContext):
	"""–û–±–æ–ª–æ—á–∫–∞ –¥–ª—è –°–î–ï–õ–ö–ò"""
	data_meeting = await get_data_of_meeting_from_state(state, message, Admin_sector)

	# –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if not data_meeting:
		return

	if not is_member_in_meeting(id_meeting=data_meeting['id_meeting'], member_id=message.chat.id):
		await message.answer("–í–∞—Å <b>–Ω–µ—Ç</b> –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–µ", reply_markup=main_panel(), parse_mode='html')
		await state.finish()
		return

	elif "–£–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞" == message.text and data_meeting.get('first_member') == message.chat.id:
		await remove_second_member(bot, message, data_meeting['id_meeting'])

	elif "–ó–∞–≤–µ—Ä—à–∏—Ç—å –°–¥–µ–ª–∫—É" == message.text and data_meeting.get('first_member') == message.chat.id:
		await end_meeting(bot, message, data_meeting)
		await state.finish()

	elif '–í—ã–π—Ç–∏ —Å–æ —Å–¥–µ–ª–∫–∏' == message.text:
		await logout_from_meeting(bot=bot, state_obj=state, message_obj=message, Admin_sector=Admin_sector, id_meeting=data_meeting['id_meeting'])

	elif '–í—ã–∑–≤–∞—Ç—å –ì–∞—Ä–∞–Ω—Ç–∞' in message.text:
		await call_garanta_for_meeting(bot=bot, message_obj=message, id_meeting=data_meeting['id_meeting'])

	#_______________________  –ê–¥–º–∏–Ω  ___________________________#

	elif '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è' == message.text and message.chat.id in ADMINS:
		await send_all_messages_of_meeting(id_meeting=data_meeting['id_meeting'], message=message)

	elif '–ó–∞–≤–µ—Ä—à–∏—Ç—å –°–¥–µ–ª–∫—É' == message.text and message.chat.id in ADMINS:
		await end_meeting(bot, message, data_meeting)

	#__________________________________________________________________#

	# –ò–¥–µ—Ç –∑–∞–ø–∏—Å—Å—ã–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
	else:

		admin_member, first_member, second_member = data_meeting['admin'], data_meeting['first_member'], data_meeting[
			'second_member']
		users_id = [admin_member, first_member, second_member]
		for user_id in users_id:
			if user_id == message.chat.id:
				continue

			# –õ–æ–≤–∏–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ chat_id –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
			if message.chat.id in ADMINS:
				try:
					await bot.send_message(user_id, f"üî± - –ì–ê–†–ê–ù–¢ - üî±\n\n{message.text}")
				except aiogram.utils.exceptions.ChatIdIsEmpty:
					pass
			else:
				try:
					await bot.send_message(user_id, f"üåÄ - {message.from_user.first_name} - üåÄ\n\n{message.text}")
				except aiogram.utils.exceptions.ChatIdIsEmpty:
					pass

		if message.chat.id in ADMINS:
			msg = f"üî± - –ì–ê–†–ê–ù–¢ - üî±\n\n {message.text}"
		else:
			msg = f"‚òÆ [{message.from_user.first_name}] \n\n{message.text}"
		write_down_message(data_meeting['id_meeting'], msg, message.chat.id)


#__________________________________________________________________________________#
@dp.message_handler(state=Admin_sector.box)
async def Admin_sector_msg(message: types.Message, state: FSMContext):
	"""–û–±–æ–ª–æ—á–∫–∞ –¥–ª—è –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª–∏"""

	if message.text == '–í—ã–∑–æ–≤—ã –≥–∞—Ä–∞–Ω—Ç–∞':
		await send_meetings_that_need_garant(message_obj=message)

	elif message.text == '–¢–µ–∫—É—â–∏–µ –°–¥–µ–ª–∫–∏':
		await send_list_of_meetings(message=message)

	elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
		statistics = get_statistics_bot()
		await message.answer(statistics, reply_markup=admin_main_panel(), parse_mode='html')

	elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞':
		await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=back_key())
		await Mailing_sector.text_mailing.set()

	elif message.text == "/admin" and message.chat.id in ADMINS:
		await message.answer("<b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_panel(), parse_mode='html')

@dp.callback_query_handler(state=Admin_sector.box)
async def Admin_sector_call(call: CallbackQuery, state: FSMContext):

	if 'remove' in call.data:
		await remove_meeting(bot_obj=bot, data_call=call)

	elif 'join' in call.data:
		await join_to_meeting_admin(state_obj=state, Meeting_sector=Meeting_sector, data_call=call)

@dp.message_handler(state=Mailing_sector.text_mailing)
async def Mailing_sector_msg(message: types.Message, state: FSMContext):
	if message.text == '–ù–∞–∑–∞–¥':
		await message.answer("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=admin_main_panel(), parse_mode='html')
		await state.finish()
		await Admin_sector.box.set()
		return

	await make_mailing_to_all(bot=bot, message_obj=message)

	await state.finish()
	await Admin_sector.box.set()


if __name__ == '__main__':
	executor.start_polling(dp)